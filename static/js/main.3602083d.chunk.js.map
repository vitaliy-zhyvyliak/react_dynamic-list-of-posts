{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/comments.ts","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","onSelect","selectedPost","className","map","post","userId","title","id","type","onClick","BASE_URL","getPostByUserId","fetch","then","response","json","NewCommentForm","addComment","postId","useState","name","setName","email","setEmail","comment","setComment","onSubmit","event","preventDefault","body","placeholder","value","onChange","e","target","PostDetails","selectedPostId","comments","setComments","setSelectedPost","isCommentsVisible","setIsCommentsVisible","getSelectedPost","data","getComments","removeComment","commentId","method","deleteComment","res","filter","useCallback","newComment","headers","JSON","stringify","createComment","coment","currComments","useEffect","length","App","setPosts","users","setUsers","setSelectedPostId","getPosts","getUsers","slice","selectPost","defaultValue","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3602083d.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  onSelect: (postId: number) => void,\n  selectedPost: number;\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  onSelect,\n  selectedPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>\n              {`[User #${post.userId}] : `}\n            </b>\n            {post.title}\n          </div>\n          {selectedPost === post.id\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostList__button button\"\n                onClick={() => onSelect(0)}\n              >\n                Close\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"PostList__button button\"\n                onClick={() => {\n                  onSelect(post.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n        </li>\n      ))}\n    </ul>\n  </div>\n));\n","import { Post, User, Comment } from '../types';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport function getPostsFromServer(): Promise<Post[]> {\n  return fetch(`${BASE_URL}/posts`)\n    .then(response => response.json());\n}\n\nexport function getUsersFromServer(): Promise<User[]> {\n  return fetch(`${BASE_URL}/users`)\n    .then(response => response.json());\n}\n\nexport function getCommentsFromServer(): Promise<Comment[]> {\n  return fetch(`${BASE_URL}/comments`)\n    .then(response => response.json());\n}\n","import { Post } from '../types';\nimport { BASE_URL, getPostsFromServer } from './api';\n\nexport function getPostByUserId(userId?: number): Promise<Post[]> {\n  if (!userId) {\n    return getPostsFromServer();\n  }\n\n  return fetch(`${BASE_URL}/posts/?userId=${userId}`)\n    .then(response => response.json());\n}\n\nexport function getPostById(postId: number): Promise<Post> {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json());\n}\n","import React, { useState } from 'react';\nimport { CommentForServer } from '../../types';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  addComment: (newComment: CommentForServer) => void,\n  postId: number,\n};\n\n// eslint-disable-next-line max-len\nexport const NewCommentForm: React.FC<Props> = React.memo(({ addComment, postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addComment({\n      name,\n      email,\n      body: comment,\n      postId,\n    });\n    resetForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(e) => (setName(e.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(e) => (setEmail(e.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={(e) => (setComment(e.target.value))}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  createComment,\n  deleteComment,\n  getPostComments,\n} from '../../api/comments';\nimport { getPostById } from '../../api/posts';\nimport { Post, Comment, CommentForServer } from '../../types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = React.memo(({ selectedPostId }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\n\n  const getSelectedPost = () => (\n    getPostById(selectedPostId).then(data => setSelectedPost(data))\n  );\n\n  const getComments = () => {\n    getPostComments(selectedPostId)\n      .then(comment => setComments(comment));\n  };\n\n  const commentVisibilityToggle = () => (\n    setIsCommentsVisible(!isCommentsVisible)\n  );\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId).then(res => {\n      if (res) {\n        setComments(comments.filter(comment => comment.id !== commentId));\n      }\n    });\n  };\n\n  const addComment = useCallback((newComment: CommentForServer) => {\n    createComment(newComment)\n      .then(coment => {\n        if (coment) {\n          setComments(currComments => [...currComments, coment]);\n        }\n      });\n  }, [comments]);\n\n  useEffect(() => {\n    getSelectedPost();\n    getComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={commentVisibilityToggle}\n            >\n              {\n                isCommentsVisible\n                  ? `Hide ${comments?.length} comments`\n                  : `Show ${comments?.length} comments`\n              }\n            </button>\n          )\n          : (\n            <p>No comments yet</p>\n          )}\n\n        {\n          !isCommentsVisible\n            ? ''\n            : (\n              <ul className=\"PostDetails__list\">\n                {comments.map((comment) => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => removeComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm addComment={addComment} postId={selectedPostId} />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import { BASE_URL } from './api';\nimport { CommentForServer } from '../types';\n\nexport const getPostComments = (postId: number) => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json());\n};\n\nexport const createComment = (newComment: CommentForServer) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newComment),\n  })\n    .then(response => response.json());\n};\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  })\n    .then(response => response.json());\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsersFromServer } from './api/api';\nimport { Post, User } from './types';\nimport { getPostByUserId } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const getPosts = (userId?: number) => (\n    getPostByUserId(userId)\n      .then(data => setPosts(data))\n  );\n\n  const getUsers = () => (\n    getUsersFromServer().then(data => (\n      setUsers(data.slice(0, 8))\n    ))\n  );\n\n  const selectPost = useCallback((postId: number) => {\n    setSelectedPostId(postId);\n  }, [setSelectedPostId]);\n\n  useEffect(() => {\n    getPosts();\n    getUsers();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            defaultValue=\"0\"\n            onChange={e => {\n              getPosts(+e.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onSelect={selectPost}\n            selectedPost={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails selectedPostId={selectedPostId} />\n            )\n            : (\n              <h1>Select Post</h1>\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}