{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/comments.ts","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","onSelect","selectedPost","className","map","post","userId","title","id","type","onClick","BASE_URL","getPostByUserId","fetch","then","response","json","NewCommentForm","addComment","postId","useState","name","setName","email","setEmail","comment","setComment","onSubmit","event","preventDefault","Math","trunc","Date","now","body","createdAt","placeholder","value","onChange","e","target","PostDetails","selectedPostId","comments","setComments","setSelectedPost","isCommentsVisible","setIsCommentsVisible","getSelectedPost","data","getComments","removeComment","commentId","filter","method","deleteComment","useCallback","newComment","currComments","JSON","stringify","createComment","useEffect","length","App","setPosts","users","setUsers","setSelectedPostId","getPosts","getUsers","slice","selectPost","defaultValue","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8ee8b35.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  onSelect: (postId: number) => void,\n  selectedPost: number;\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  onSelect,\n  selectedPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>\n              {`[User #${post.userId}] : `}\n            </b>\n            {post.title}\n          </div>\n          {selectedPost === post.id\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostList__button button\"\n                onClick={() => onSelect(0)}\n              >\n                Close\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"PostList__button button\"\n                onClick={() => {\n                  onSelect(post.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n        </li>\n      ))}\n    </ul>\n  </div>\n));\n","import { Post, User, Comment } from '../types';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport function getAllPosts(): Promise<Post[]> {\n  return fetch(`${BASE_URL}/posts`)\n    .then(response => response.json());\n}\n\nexport function getAllUsers(): Promise<User[]> {\n  return fetch(`${BASE_URL}/users`)\n    .then(response => response.json());\n}\n\nexport function getAllComments(): Promise<Comment[]> {\n  return fetch(`${BASE_URL}/comments`)\n    .then(response => response.json());\n}\n","import { Post } from '../types';\nimport { BASE_URL, getAllPosts } from './api';\n\nexport function getPostByUserId(userId?: number): Promise<Post[]> {\n  if (!userId) {\n    return getAllPosts();\n  }\n\n  return fetch(`${BASE_URL}/posts/?userId=${userId}`)\n    .then(response => response.json());\n}\n\nexport function getPostById(postId: number): Promise<Post> {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json());\n}\n","import React, { useState } from 'react';\nimport { Comment } from '../../types';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  addComment: (newComment: Comment) => void,\n  postId: number,\n};\n\n// eslint-disable-next-line max-len\nexport const NewCommentForm: React.FC<Props> = React.memo(({ addComment, postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addComment({\n      id: Math.trunc(Date.now()),\n      name,\n      email,\n      body: comment,\n      postId,\n      createdAt: new Date(),\n    });\n    resetForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(e) => (setName(e.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(e) => (setEmail(e.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={(e) => (setComment(e.target.value))}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  createComment,\n  deleteComment,\n  getPostComments,\n} from '../../api/comments';\nimport { getPostById } from '../../api/posts';\nimport { Post, Comment } from '../../types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = React.memo(({ selectedPostId }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\n\n  const getSelectedPost = () => (\n    getPostById(selectedPostId).then(data => setSelectedPost(data))\n  );\n\n  const getComments = () => {\n    getPostComments(selectedPostId)\n      .then(comment => setComments(comment));\n  };\n\n  const commentVisibilityToggle = () => (\n    setIsCommentsVisible(!isCommentsVisible)\n  );\n\n  const removeComment = (commentId: number) => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n    deleteComment(commentId);\n  };\n\n  const addComment = useCallback((newComment: Comment) => {\n    setComments(currComments => [...currComments, newComment]);\n    createComment(newComment);\n  }, [comments]);\n\n  useEffect(() => {\n    getSelectedPost();\n    getComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={commentVisibilityToggle}\n            >\n              {\n                isCommentsVisible\n                  ? `Hide ${comments?.length} comments`\n                  : `Show ${comments?.length} comments`\n              }\n            </button>\n          )\n          : (\n            <p>No comments yet</p>\n          )}\n\n        {\n          !isCommentsVisible\n            ? ''\n            : (\n              <ul className=\"PostDetails__list\">\n                {comments.map((comment) => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => removeComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm addComment={addComment} postId={selectedPostId} />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import { BASE_URL } from './api';\nimport { Comment } from '../types';\n\nexport const getPostComments = (postId: number) => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json());\n};\n\nexport const createComment = (newComment: Comment) => {\n  return fetch(`${BASE_URL}/comments/`, { method: 'POST', body: JSON.stringify(newComment) })\n    .then(response => response.json());\n};\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n    .then(response => response.json());\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllUsers } from './api/api';\nimport { Post, User } from './types';\nimport { getPostByUserId } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const getPosts = (userId?: number) => (\n    getPostByUserId(userId)\n      .then(data => setPosts(data))\n  );\n\n  const getUsers = () => (\n    getAllUsers().then(data => (\n      setUsers(data.slice(0, 8))\n    ))\n  );\n\n  const selectPost = useCallback((postId: number) => {\n    setSelectedPostId(postId);\n  }, [setSelectedPostId]);\n\n  useEffect(() => {\n    getPosts();\n    getUsers();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            defaultValue=\"0\"\n            onChange={e => {\n              getPosts(+e.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onSelect={selectPost}\n            selectedPost={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails selectedPostId={selectedPostId} />\n            )\n            : (\n              <h1>Select Post</h1>\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}